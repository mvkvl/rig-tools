#!/usr/bin/env python3

import yaml
import json
from multiprocessing import Pool
from multiprocessing.dummy import Pool as ThreadPool
from crypto.explorer import Explorer
from optparse import OptionParser

THREAD_POOL_SIZE = 8

# performs up to THREAD_POOL_SIZE web requests in parallel
def balance_query(conf, func):
    pool = ThreadPool(THREAD_POOL_SIZE)
    result = pool.map(func, list(conf.items()))
    pool.close()
    pool.join()
    return dict(zip(conf.keys(), result))

# calls network explorer API for given crypto / wallet
def get_wallet_balance(query):
    return Explorer(query[0].split(".")[0], query[1]).balance()

# converts input configuration dictionary to
# dictionary suitable for 'balance_query' call
def to_query(crypto_conf):
    query = {}
    for c in crypto_conf:
        for k in crypto_conf.get(c):
            query["{}.{}".format(c,k)] = crypto_conf.get(c).get(k)
    return query

# converts result of 'balance_query' call to
# initial configuration dictionary structure
def to_conf(query_res):
    conf = {}
    for k in query_res:
        a,b = k.split(".")
        if not conf.get(a):
            conf[a] = {}
        conf[a][b] = float(query_res.get(k))
    return conf

# reads configuration from YAML file
def read_conf(file):
    conf = {}
    with open(file) as fp:
        conf = yaml.load(fp)
    return conf

# gets program arguments
def get_program_arguments():
    parser = OptionParser()
    parser.add_option("-c", "--config", dest="config",  help="configuration file")
    # parser.add_option("-i", "--write-influx", action="store_true", dest="write_influx", help="write data to influxdb",     default=False)
    # parser.add_option("-q", "--quiet",        action="store_true", dest="quiet",        help="no output to stdout",        default=False)
    # parser.add_option("-p", "--pool",         action="store_true", dest="pool",         help="get pool balance",           default=False)
    # parser.add_option("-m", "--mining",       action="store_true", dest="mining",       help="get mining wallet balance",  default=False)
    # parser.add_option("-l", "--holding",      action="store_true", dest="holding",      help="get holding wallet balance", default=False)
    (options, arguments) = parser.parse_args()
    return options, arguments


opts, args = get_program_arguments()

if not opts.config:
    raise ValueError("configuration file argument not passed")

conf   = read_conf(opts.config)
result = to_conf(balance_query(to_query(conf["crypto"]), get_wallet_balance))

# print result to stdout if console output is enabled in configuration
if conf.get("output") and                          \
   conf.get("output").get("console") and           \
   conf.get("output").get("console").get("enabled"):
      import output.console
      output.console.output(result)

# save result to influxdb if influxdb output is enabled in configuration
if conf.get("output") and                           \
   conf.get("output").get("influxdb") and           \
   conf.get("output").get("influxdb").get("enabled"):
      import output.influxdb
      output.influxdb.save_wallet_balance(result, conf.get("output").get("influxdb"))
